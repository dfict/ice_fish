// Drum sample //

#define SAMPLE_RATE 22050
#define SIZE 256
#define LED_PIN     13
#define LED_PORT    PORTB
#define LED_BIT     5
#define SPEAKER_PIN 11

const byte kick[] = {
    254, 63, 249, 171, 97, 255, 169, 66,
    223, 109, 230, 130, 184, 18, 88, 91,
    153, 99, 92, 66, 212, 128, 53, 155,
    127, 255, 189, 81, 13, 157, 141, 182,
    6, 115, 3, 104, 247, 181, 29, 118,
    154, 190, 71, 77, 102, 251, 247, 56,
    56, 38, 29, 15, 66, 232, 91, 8,
    130, 74, 52, 152, 53, 18, 243, 128,
    199, 237, 180, 178, 200, 134, 254, 206,
    238, 170, 37, 214, 46, 168, 184, 236,
    183, 225, 31, 214, 138, 159, 71, 158,
    165, 206, 130, 128, 175, 17, 66, 222,
    37, 255, 151, 41, 223, 51, 165, 181,
    25, 200, 136, 193, 204, 59, 49, 5,
    251, 245, 133, 213, 32, 82, 97, 245,
    64, 255, 204, 31, 172, 22, 111, 251,
    83, 175, 153, 37, 126, 10, 224, 203,
    208, 140, 131, 86, 76, 218, 73, 120,
    212, 160, 226, 175, 180, 204, 129, 104,
    203, 151, 21, 1, 16, 38, 166, 64,
    62, 77, 253, 148, 125, 244, 236, 48,
    112, 216, 253, 130, 2, 116, 115, 188,
    0, 0, 224, 205, 121, 180, 159, 145,
    96, 179, 235, 242, 159, 98, 75, 108,
    147, 48, 12, 119, 122, 95, 64, 62,
    35, 108, 218, 6, 204, 174, 194, 45,
    98, 213, 36, 21, 247, 192, 45, 52,
    10, 130, 13, 188, 203, 73, 103, 251,
    250, 16, 28, 200, 239, 24, 213, 170,
    156, 79, 217, 198, 241, 234, 28, 24,
    231, 1, 19, 108, 177, 238, 98, 103,
    53, 33, 224, 235, 211, 190, 168, 104,
};

const byte snare[] = {
    69, 126, 249, 204, 207, 109, 205, 219,
    4, 223, 44, 181, 158, 201, 71, 143,
    51, 247, 134, 14, 88, 101, 122, 89,
    218, 27, 106, 196, 48, 24, 71, 86,
    159, 13, 76, 146, 234, 156, 230, 211,
    177, 131, 3, 49, 105, 117, 241, 30,
    236, 198, 191, 212, 141, 56, 129, 178,
    55, 65, 195, 67, 15, 86, 82, 174,
    163, 191, 41, 185, 114, 230, 138, 130,
    72, 210, 66, 137, 252, 28, 237, 91,
    61, 230, 28, 87, 61, 35, 195, 231,
    194, 198, 81, 12, 235, 193, 150, 30,
    178, 246, 217, 79, 18, 227, 231, 44,
    186, 213, 41, 22, 244, 25, 209, 198,
    238, 130, 114, 130, 134, 84, 76, 239,
    152, 196, 70, 104, 251, 124, 83, 74,
    101, 234, 150, 96, 96, 24, 228, 64,
    57, 167, 177, 245, 126, 125, 60, 186,
    94, 126, 106, 65, 99, 29, 210, 93,
    63, 113, 106, 241, 95, 17, 223, 8,
    18, 73, 102, 138, 66, 58, 124, 251,
    189, 172, 115, 221, 172, 187, 90, 75,
    193, 193, 42, 34, 161, 114, 78, 162,
    164, 179, 192, 31, 21, 54, 207, 78,
    114, 131, 112, 223, 216, 68, 89, 95,
    216, 117, 34, 246, 248, 13, 78, 45,
    198, 73, 117, 80, 116, 208, 77, 73,
    73, 36, 252, 36, 219, 0, 132, 255,
    192, 217, 223, 194, 203, 244, 177, 2,
    163, 44, 98, 131, 2, 58, 127, 180,
    171, 13, 192, 98, 61, 212, 153, 99,
    185, 198, 70, 230, 231, 163, 142, 252,
};

const byte hat[] = {
    100, 223, 26, 104, 10, 224, 57, 11,
    10, 184, 81, 126, 87, 68, 231, 61,
    105, 173, 26, 130, 52, 58, 136, 187,
    117, 223, 225, 212, 3, 210, 230, 169,
    192, 63, 119, 27, 6, 178, 48, 242,
    153, 211, 249, 97, 17, 76, 90, 139,
    20, 80, 174, 8, 190, 89, 13, 2,
    79, 172, 46, 142, 71, 128, 144, 204,
    199, 233, 195, 184, 175, 37, 98, 21,
    97, 77, 243, 247, 16, 12, 97, 4,
    251, 81, 110, 224, 95, 132, 4, 86,
    198, 109, 246, 23, 193, 181, 162, 16,
    217, 53, 169, 141, 109, 50, 56, 31,
    252, 226, 174, 145, 194, 113, 74, 183,
    203, 123, 61, 15, 30, 0, 211, 35,
    234, 121, 94, 199, 104, 149, 0, 108,
    179, 146, 222, 74, 108, 165, 114, 134,
    26, 167, 154, 176, 251, 58, 116, 25,
    204, 204, 255, 157, 190, 130, 65, 101,
    132, 191, 32, 88, 61, 191, 251, 151,
    42, 140, 215, 49, 73, 244, 164, 132,
    166, 65, 14, 190, 231, 201, 22, 63,
    209, 211, 123, 185, 11, 34, 74, 136,
    42, 54, 129, 76, 229, 217, 37, 98,
    104, 150, 216, 67, 204, 167, 19, 169,
    253, 201, 20, 205, 255, 149, 187, 62,
    35, 19, 1, 119, 137, 214, 209, 225,
    254, 119, 135, 181, 21, 50, 31, 108,
    187, 156, 214, 207, 3, 224, 164, 162,
    5, 0, 129, 34, 40, 65, 239, 154,
    163, 47, 51, 146, 166, 2, 146, 172,
    14, 47, 67, 226, 248, 220, 172, 21,
};

const byte crash[] = {
    124, 72, 179, 194, 231, 5, 5, 6,
    180, 241, 193, 142, 130, 223, 250, 227,
    175, 218, 9, 228, 180, 255, 65, 85,
    126, 13, 86, 158, 253, 228, 36, 44,
    199, 27, 158, 124, 204, 47, 201, 117,
    59, 112, 129, 163, 51, 51, 84, 42,
    39, 188, 242, 143, 122, 175, 100, 0,
    203, 238, 99, 84, 9, 22, 60, 85,
    55, 200, 109, 98, 195, 209, 95, 129,
    245, 86, 225, 99, 179, 42, 77, 249,
    210, 148, 108, 99, 66, 131, 118, 130,
    233, 227, 224, 198, 99, 210, 154, 193,
    209, 255, 152, 119, 93, 135, 173, 154,
    201, 217, 164, 100, 195, 253, 67, 69,
    21, 189, 51, 19, 181, 130, 200, 29,
    169, 66, 26, 9, 148, 35, 196, 203,
    141, 53, 134, 43, 36, 236, 96, 125,
    138, 203, 39, 173, 34, 51, 41, 119,
    223, 29, 29, 225, 22, 82, 156, 202,
    130, 225, 193, 22, 127, 204, 102, 47,
    157, 14, 121, 170, 135, 70, 24, 214,
    97, 255, 151, 208, 89, 132, 181, 80,
    253, 181, 225, 150, 167, 141, 52, 221,
    191, 33, 116, 235, 8, 181, 150, 101,
    218, 230, 86, 82, 28, 180, 127, 43,
    101, 201, 44, 159, 28, 115, 241, 231,
    254, 167, 143, 36, 219, 251, 29, 42,
    121, 241, 69, 180, 14, 233, 144, 99,
    234, 173, 197, 191, 95, 211, 118, 18,
    125, 136, 250, 129, 232, 243, 185, 214,
    190, 148, 150, 224, 158, 99, 7, 29,
    24, 107, 232, 77, 175, 141, 136, 67,
};
  
  int out;
  uint16_t cnt,tmp;
  int bound;
  bool trig = false;
  int type = false;
  

ISR(TIMER1_COMPA_vect) {
   
  OCR2A = 0xff & out;

  if (type == 0) out = kick[cnt];
  if (type == 1) out = snare[cnt];
  if (type == 2) out = hat[cnt];
  if (type == 3) out = crash[cnt];

  if (trig) { trig = false; cnt = 0; } 

  if (tmp >= bound) { cnt++; tmp = 0; }

  if(cnt >= SIZE) { trig = false; out = 0; }
  
  tmp++;
  
}

void startPlayback()
{
    pinMode(SPEAKER_PIN, OUTPUT);
    pinMode(LED_PIN, OUTPUT);

    ASSR &= ~(_BV(EXCLK) | _BV(AS2));
 
    TCCR2A |= _BV(WGM21) | _BV(WGM20);
    TCCR2B &= ~_BV(WGM22);

    TCCR2A = (TCCR2A | _BV(COM2A1)) & ~_BV(COM2A0);
    TCCR2A &= ~(_BV(COM2B1) | _BV(COM2B0));

    TCCR2B = (TCCR2B & ~(_BV(CS12) | _BV(CS11))) | _BV(CS10);

    OCR2A = 0;

    cli();

    TCCR1B = (TCCR1B & ~_BV(WGM13)) | _BV(WGM12);
    TCCR1A = TCCR1A & ~(_BV(WGM11) | _BV(WGM10));

    TCCR1B = (TCCR1B & ~(_BV(CS12) | _BV(CS11))) | _BV(CS10);

    OCR1A = F_CPU / SAMPLE_RATE;

    TIMSK1 |= _BV(OCIE1A);

    sei();
    
}

void stopPlayback()
{

    TIMSK1 &= ~_BV(OCIE1A);

    TCCR1B &= ~_BV(CS10);
    TCCR2B &= ~_BV(CS10);

    digitalWrite(SPEAKER_PIN, LOW);
}


void setup() {

  startPlayback();

}


void loop() {
  
  LED_PORT ^= 1 << LED_BIT;

  trig = true;

  type = random(0, 4);
  
 // bound = random(9, 17);
    bound = map(analogRead(2),0, 1023, 9, 60);

  delay (240);
  
}
